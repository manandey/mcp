import { z } from "zod";
import { CallToolResult } from "@modelcontextprotocol/sdk/types.js";
import { McpTool, McpToolConfig, ReleaseState, Toolset } from "@salesforce/mcp-provider-api";
import { patchEnvironment } from "../utils/patchEnvironment.js";

const DESCRIPTION: string = `Patch/update environment configuration in DevOps Center.

**Usage:**
- Use this tool to update environment settings in the DevOps Center org.
- Provide the environment ID and the configuration updates to apply.

**Input Parameters:**
- username: Username of the DevOps Center org
- environmentId: The ID of the environment to update
- config: Configuration updates to apply

**Output:**
- Status of the environment patch operation`;

const inputSchema = z.object({
    username: z.string().describe("Username of the DevOps Center org"),
    environmentId: z.string().describe("The ID of the environment to update"),
    config: z.record(z.any()).describe("Configuration updates to apply")
});
type InputArgsShape = typeof inputSchema.shape;

const outputSchema = z.object({
    environment: z.object({
        id: z.string().describe("Environment ID"),
        status: z.string().describe("Update status")
    }).describe("Updated environment details")
});
type OutputArgsShape = typeof outputSchema.shape;

export class SfDevopsPatchEnvironmentMcpTool extends McpTool<InputArgsShape, OutputArgsShape> {
    public static readonly NAME: string = 'sf-devops-patch-environment';

    public constructor() {
        super();
    }

    public getReleaseState(): ReleaseState {
        return ReleaseState.NON_GA;
    }

    public getToolsets(): Toolset[] {
        return [Toolset.OTHER];
    }

    public getName(): string {
        return SfDevopsPatchEnvironmentMcpTool.NAME;
    }

    public getConfig(): McpToolConfig<InputArgsShape, OutputArgsShape> {
        return {
            title: "Patch DevOps Environment",
            description: DESCRIPTION,
            inputSchema: inputSchema.shape,
            outputSchema: outputSchema.shape,
            annotations: {
                readOnlyHint: false
            }
        };
    }

    public async exec(input: { 
        username: string; 
        environmentId: string;
        config: Record<string, any>;
    }): Promise<CallToolResult> {
        try {
            const result = await patchEnvironment({
                username: input.username,
                environmentId: input.environmentId
            });
            
            const response = { environment: result };
            return {
                content: [{ type: "text", text: JSON.stringify(response, null, 2) }],
                structuredContent: response
            };
        } catch (error) {
            const errorMessage = 'Operation failed. Please check your authentication and try again.';
            return {
                content: [{ type: "text", text: `Error patching environment: ${errorMessage}` }],
                isError: true
            };
        }
    }
}

import { z } from "zod";
import { CallToolResult } from "@modelcontextprotocol/sdk/types.js";
import { McpTool, McpToolConfig, ReleaseState, Toolset } from "@salesforce/mcp-provider-api";
import { deployProjectToOrg } from "../utils/deployProjectToOrg.js";

const DESCRIPTION: string = `Deploy a DevOps project to a target Salesforce org.

**Input Parameters:**
- username: DevOps Center org username
- projectId: The ID of the project to deploy
- targetOrgId: The ID of the target org to deploy to
- deploymentType: Type of deployment (e.g., 'validate', 'deploy')

**Output:**
- Deployment status and results`;

const inputSchema = z.object({
    projectDir: z.string().describe("Path to the project directory"),
    targetOrg: z.string().describe("The target org to deploy to"),
    concise: z.boolean().optional().default(true).describe("Use concise output")
});
type InputArgsShape = typeof inputSchema.shape;

const outputSchema = z.object({
    deployment: z.object({
        id: z.string().describe("Deployment ID"),
        status: z.string().describe("Deployment status"),
        targetOrg: z.string().describe("Target org ID")
    }).describe("Deployment details")
});
type OutputArgsShape = typeof outputSchema.shape;

export class SfDevopsDeployProjectToOrgMcpTool extends McpTool<InputArgsShape, OutputArgsShape> {
    public static readonly NAME: string = 'sf-devops-deploy-project-to-org';

    public constructor() {
        super();
    }

    public getReleaseState(): ReleaseState {
        return ReleaseState.NON_GA;
    }

    public getToolsets(): Toolset[] {
        return [Toolset.OTHER];
    }

    public getName(): string {
        return SfDevopsDeployProjectToOrgMcpTool.NAME;
    }

    public getConfig(): McpToolConfig<InputArgsShape, OutputArgsShape> {
        return {
            title: "Deploy DevOps Project to Org",
            description: DESCRIPTION,
            inputSchema: inputSchema.shape,
            outputSchema: outputSchema.shape,
            annotations: {
                readOnlyHint: false
            }
        };
    }

    public async exec(input: { 
        projectDir: string; 
        targetOrg: string; 
        concise?: boolean;
    }): Promise<CallToolResult> {
        try {
            const result = await deployProjectToOrg({
                projectDir: input.projectDir,
                targetOrg: input.targetOrg,
                concise: input.concise
            });
            
            return {
                content: [{ type: "text", text: JSON.stringify(result, null, 2) }],
                structuredContent: result
            };
        } catch (error) {
            const errorMessage = 'Operation failed. Please check your authentication and try again.';
            return {
                content: [{ type: "text", text: `Error deploying project: ${errorMessage}` }],
                isError: true
            };
        }
    }
}
